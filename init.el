;;; init --- Minimal init file to bootstrap our actual init file in Eearslya.org

;;; Commentary:
;; Code is almost entirely taken from this extremely helpful blog post.
;; http://www.holgerschurig.de/en/emacs-efficiently-untangling-elisp/

;; A much more efficient and extensible babel tangle that can also read
;; and respond to org-mode TODO headers.
;; Tangles all of the code blocks without constantly closing and re-opening
;; the destination file, and byte-compiles it all at the end. It will also
;; ignore any org-mode sections marked as DISABLED.

;;; Code:
;; Automatically added by package.el, commented out for later initialization.
;; (package-initialize)

(setq luna|org-file "Eearslya.org"
      luna|el-file  "Eearslya.el"
      luna|elc-file "Eearslya.elc")

(defun luna|tangle-section-disabled-p ()
  "Return t if the current section header was DISABLED, else nil."
  (save-excursion
    (if (re-search-backward "^\\*+\\s-+\\(.*?\\)?\\s-*$" nil t)
	(string-prefix-p "DISABLED" (match-string 1))
      nil)))

(defun luna|tangle-config-org (orgfile elfile)
  "Tangle all valid ELisp code from ORGFILE into ELFILE.
This function reads all source code blocks from ORGFILE and
tangles them together into ELFILE.
Source code blocks are only included if they match all of
the following criteria:
- have a language of 'emacs-lisp'
- not set to todo state 'DISABLED'
- not marked with ':tangle no'
- not marked with ':not windows' on Windows
- not marked with ':only windows' on Linux/MacOS"
  (let* ((body-list ())
	 ;; Effectively disable garbage collection while tangling,
	 ;; to increase speed.
	 (gc-cons-threshold most-positive-fixnum)
	 (win32 (memq system-type '(windows-nt ms-dos)))
	 (org-babel-src-block-regexp (concat
				      ;;  (1) Indentation                (2) Language
				      "^\\([ \t]*\\)#\\+begin_src[ \t]+\\([^ \f\t\n\r\v]+\\)[ \t]*"
				      ;; (3) Switches
				      "\\([^\":\n]*\"[^\"\n*]*\"[^\":\n]*\\|[^\":\n]*\\)"
				      ;; (4) Header arguments
				      "\\([^\n]*\\)\n"
				      ;; (5) Body
				      "\\([^\000]*?\n\\)??[ \t]*#\\+end_src")))
    (with-temp-buffer
      (insert-file-contents orgfile)
      (goto-char (point-min))
      (while (re-search-forward org-babel-src-block-regexp nil t)
	(let ((lang (match-string 2))
	      (args (match-string 4))
	      (body (match-string 5))
	      (disabled (luna|tangle-section-disabled-p)))
	  (when (and (string= lang "emacs-lisp")
		     (not (string-match-p ":tangle\\s-+no" args))
		     (not disabled)
		     (not (and (string-match-p ":not\\s-+windows" args)
			       win32))
		     (or (and (string-match-p ":only\\s-+windows" args)
			      win32)
			 (not (string-match-p ":only\\s-+windows" args))))
	    (add-to-list 'body-list body)))))
    (with-temp-file elfile
      (insert ";;; Eearslya -- Emacs configuration file\n")
      (insert ";; DO NOT EDIT THIS FILE.\n")
      (insert ";; This file is auto-generated using the org-mode code blocks\n")
      (insert (format ";; from %s.\n" orgfile))
      (insert ";; Any changes to this file will be overwritten.\n\n")
      (insert ";;; Commentary:\n")
      (insert ";; This file contains all of the configuration and customization\n")
      (insert ";; for my Emacs install. All of this code can be found along\n")
      (insert ";; with documentation, in the accompanying Org file noted above.\n\n")
      (insert ";;; Code:\n\n")
      (apply 'insert (reverse body-list))
      (insert "\n(provide 'Eearslya)\n\n")
      (insert ";;; Eearslya.el ends here\n"))
    (message "Wrote %s ..." elfile)))

(defun luna|tangle-config-load ()
  "Tangle and load the config file."
  (let ((orgfile (expand-file-name luna|org-file user-emacs-directory))
	(elfile (expand-file-name luna|el-file user-emacs-directory)))
    (luna|tangle-config-org orgfile elfile)
    (load-file elfile)))

;; Add in a convenient hook function to automatically re-tangle and compile the init file
;; whenever the org file gets updated.
(defun luna|tangle-config-org-hook-func ()
  "Automatically re-tangle the init file upon save."
  (when (string= luna|org-file (buffer-name))
    (luna|tangle-config-load)))
(add-hook 'after-save-hook #'luna|tangle-config-org-hook-func)

;; Tangle our shiny and neatly-organized org file, if it hasn't changed.
;; Then, load it.
(luna|tangle-config-load)

(provide 'init)

;;; init.el ends here
