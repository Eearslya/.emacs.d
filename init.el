;;; init.el --- -*- lexical-binding: t -*-
;;
;; Filename: init.el
;; Description: Tangle code blocks from an Org file to initialize Emacs.
;; Author: Eearslya Sleiarion
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;;; Commentary:
;;
;; This code is almost entirely taken from this extremely helpful blog post.
;; http://www.holgerschurig.de/en/emacs-efficiently-untangling-elisp/
;;
;; This file performs the function of Org mode's =org-babel-tangle=,
;; with some extra modifications and improvements to make it more
;; extensible and efficient. The Elisp code loaded using these functions
;; are used to initialize Emacs.
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;;; Code:

(defconst luna/org-file "luna.org"
  "Org file to search for Elisp code blocks, relative to Emacs home.")
(defconst luna/el-file (concat (file-name-base luna/org-file) ".el")
  "Elisp file to output the Org file's source blocks into.")

;; Thanks to Nikolaj Schumacher!
;; https://lists.gnu.org/archive/html/help-gnu-emacs/2008-06/msg00087.html
(defmacro luna/measure-time (&rest body)
  "Measure the time it takes to evaluate BODY."
  `(let ((measure-time-start (current-time)))
     ,@body
     (format "%.06f" (float-time (time-since measure-time-start)))))

(defun luna/tangle-current-section ()
  "Return the title of the current section."
  (save-excursion
    (if (re-search-backward "^\\*+\\s-+\\(.*?\\)?\\s-*$" nil t)
	(match-string 1)
      nil)))

(defun luna/tangle-section-disabled-p ()
  "Return t if the current section header is disabled, else nil."
  (string-prefix-p "DISABLED" (luna/tangle-current-section)))

(defun luna/tangle-config-org (orgfile elfile)
  "Tangle all valid Elisp code from ORGFILE into ELFILE.
This function reads all source code blocks from ORGFILE and tangles
them together into ELFILE. ELFILE will be entirely overwritten with
the resulting Elisp code.
Source code blocks from ORGFILE are only included if they match all
of the following criteria:
- have a language of 'emacs-lisp'
- are not under an Org section with a todo status of 'DISABLED'
- do not have the flag ':tangle no'"
  (let* ((body-list ())
	 (last-section "")
	 ;; Effectively disable garbage collection while tangling,
	 ;; giving us a slight performance increase.
	 (gc-cons-threshold most-positive-fixnum)
	 (org-babel-src-block-regexp
	  (concat
	   ;;  (1) Indentation                (2) Language
	   "^\\([ \t]*\\)#\\+begin_src[ \t]+\\([^ \f\t\n\r\v]+\\)[ \t]*"
	   ;; (3) Switches
	   "\\([^\":\n]*\"[^\"\n*]*\"[^\":\n]*\\|[^\":\n]*\\)"
	   ;; (4) Header arguments
	   "\\([^\n]*\\)\n"
	   ;; (5) Body
	   "\\([^\000]*?\n\\)??[ \t]*#\\+end_src")))
    (with-temp-buffer
      (insert-file-contents orgfile)
      (goto-char (point-min))
      (while (re-search-forward org-babel-src-block-regexp nil t)
	(let* ((lang (match-string 2))
	       (args (match-string 4))
	       (body (match-string 5))
	       (sect (luna/tangle-current-section))
	       (disabled (luna/tangle-section-disabled-p)))
	  (when (and (string= lang "emacs-lisp")
		     (not (string-match-p ":tangle\\s-+no" args))
		     (not disabled))
	    ;; Add a comment to the Elisp code showing what Org section
	    ;; this code block came from, but don't show the same
	    ;; section title multiple times in a row.
	    (if (string= sect last-section)
		(push body body-list)
	      (progn
		(push (concat
		       (format ";;; %s\n" sect)
		       body)
		      body-list)
		(setq last-section sect)))))))
    (let ((elname (file-name-base elfile))
	  (elfilename (file-name-nondirectory elfile))
	  (orgfilename (file-name-nondirectory orgfile)))
      (with-temp-file elfile
	(insert
	 (format ";;; %s --- -*- lexical-binding: t -*-\n" elfilename)
	 ";;\n"
	 (format ";; Filename: %s\n" elfilename)
	 ";; Description: Emacs initialization file, autogenerated by init.el.\n"
	 (format ";; Last-Updated: %s\n" (current-time-string))
	 ";;\n"
	 ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n"
	 ";;\n"
	 ";;; Commentary:\n"
	 ";;\n"
	 ";; DO NOT EDIT THIS FILE.\n"
	 ";; This file is auto-generated using the Org mode code blocks\n"
	 (format ";; from %s.\n" orgfilename)
	 ";; Any changed to this file will be overwritten.\n"
	 ";;\n"
	 ";; This file contains all of the configuration and customization\n"
	 ";; for my Emacs install. All of this code can be found along with\n"
	 ";; documentation, in the Org file noted above.\n"
	 ";;\n"
	 ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n"
	 ";;\n"
	 ";;; Code:\n\n")
	(apply 'insert (reverse body-list))
	(insert
	 (format "\n(provide '%s)\n" elname)
	 (format ";;; %s ends here\n" elfilename))))
    (message "Wrote %s" elfile)))

(defun luna/tangle-config-load (&optional force)
  "Tangle and load the config file.
If FORCE is non-nil, perform tangling and compiling even when the Elisp
file appears to be up-to-date with the Org file.
Calling this function interactively will always set FORCE to non-nil."
  (interactive "p")
  (let ((reload-time
	 (luna/measure-time
	  (let* ((orgfile (expand-file-name luna/org-file user-emacs-directory))
		 (elfile (expand-file-name luna/el-file user-emacs-directory))
		 (elbase (file-name-sans-extension elfile)))
	    (message "Reloading Luna configuration file...")
	    (when (or (file-newer-than-file-p orgfile elfile)
		      force)
	      (luna/tangle-config-org orgfile elfile)
	      (byte-compile-file elfile))
	    (load elbase)))))
    (message "Luna configuration reload completed in %ss." reload-time)))

(luna/tangle-config-load)

(provide 'init)
;;; init.el ends here
